

package org.usfirst.frc6979.FRC2018;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	
<<<<<<< HEAD
    private static WPI_TalonSRX drivefrontLeft;
    private static WPI_TalonSRX drivebackLeft;
    private static SpeedControllerGroup driveLeft;
    private static WPI_TalonSRX drivefrontRight;
    private static WPI_TalonSRX drivebackRight;
    private static SpeedControllerGroup driveRight;
=======
    public static WPI_TalonSRX driveFrontLeft;
    public static WPI_TalonSRX driveBackLeft;
    public static SpeedControllerGroup driveLeft;
    public static WPI_TalonSRX driveFrontRight;
    public static WPI_TalonSRX driveBackRight;
    public static SpeedControllerGroup driveRight;
>>>>>>> wreckingBall
    public static DifferentialDrive driveDifferentialDrive;
    
    public static DigitalInput elevatorHighLimit;
    public static WPI_TalonSRX elevatorGear;
    public static WPI_TalonSRX elevatorString;
    public static WPI_TalonSRX leftArm;
    public static WPI_TalonSRX rightArm;
    public static VictorSP wrenchMotor;
    public static DigitalInput elevatorLowLimit;



    public static void init() {
    	
    	/*
    	 * 
    	 * 
    	 */
    	
    	/*TODO:
    	 * - Fix depreciated telemetry
    	 * 
    	 */
    	
    	
    	/*
    	 * INSTANTIATE DRIVE
    	 */
    	// Instantiate left Speed Controller group
        driveFrontLeft = new WPI_TalonSRX(0);
        driveBackLeft = new WPI_TalonSRX(2);
        driveLeft = new SpeedControllerGroup(driveFrontLeft, driveBackLeft  );
        	//LiveWindow.addActuator("Drive", "d_Left", drived_Left);
        // Instantiate right Speed Controller group
        driveFrontRight = new WPI_TalonSRX(4);
        driveBackRight = new WPI_TalonSRX(3);
        driveRight = new SpeedControllerGroup(driveFrontRight, driveBackRight  );
        //Reverse speed controller group. May not work; individual motors may need to be changed
        driveRight.setInverted(true);
        	//LiveWindow.addActuator("Drive", "d_Right", drived_Right);
        //Set neutral mode for speed controllers
        driveFrontLeft.setNeutralMode(com.ctre.phoenix.motorcontrol.NeutralMode.Brake);
        driveBackLeft.setNeutralMode(com.ctre.phoenix.motorcontrol.NeutralMode.Brake);
        driveFrontRight.setNeutralMode(com.ctre.phoenix.motorcontrol.NeutralMode.Brake);
        driveBackRight.setNeutralMode(com.ctre.phoenix.motorcontrol.NeutralMode.Brake);
        
        // Instantiate Differential Drive
        driveDifferentialDrive = new DifferentialDrive(driveLeft, driveRight);
        	//LiveWindow.addActuator("Drive", "Differential Drive", driveDifferentialDrive);
        // Differential Drive Set-Up
        driveDifferentialDrive.setSafetyEnabled(true);
        driveDifferentialDrive.setExpiration(0.1);
        driveDifferentialDrive.setMaxOutput(1.0);
        
        /*
         * INSTANTIATE ELEVATOR IO
         */
        // Elevator Speed Controllers
        //TODO: Replace motor assignments
        elevatorGear = new WPI_TalonSRX(1);
        elevatorString = new WPI_TalonSRX(5);
        // Elevator High Limit Switch
        elevatorHighLimit = new DigitalInput(1);
        //LiveWindow.addSensor("Elevator", "topElevLimit", elevatortopElevLimit);
        //Elevator Low Limit Switch
        elevatorLowLimit = new DigitalInput(0);
        //LiveWindow.addSensor("Elevator", "bottomElevLimit", elevatorbottomElevLimit);
        
        /*
         * INSTANTIATE ARMS IO
         */
        //Arm Speed Controllers
        /*
        leftArm = new WPI_TalonSRX(9);
        rightArm = new WPI_TalonSRX(8);
        rightArm.setInverted(true);
        rightArm.follow(leftArm); */
        
    }
    

}
