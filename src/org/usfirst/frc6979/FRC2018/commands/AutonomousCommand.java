// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6979.FRC2018.commands;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.DriverStation.Alliance;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

import org.usfirst.frc6979.FRC2018.RobotMap;


public class AutonomousCommand extends Command {
	
	private Timer robotTimer;
	public DriverStation DS;
	private final DifferentialDrive autoDrive = RobotMap.driveDifferentialDrive;
	int robotLocation;
	private double TURN_SPEED = 0.4;
	private double MIDDLE_DRIVE = 0.3;
	private double DRIVE_SPEED = 0.5;
	Alliance robotColour;
	int positionLeft = 1;
	int positionRight = 3;
	int positionMiddle = 2;
	Alliance switchColour;
	Alliance switchInvalid;
	
	
	
    public AutonomousCommand() {
    	
    	
    	
    	//For Left Side
    	
    	
    	if(robotLocation == positionLeft) {
    		robotTimer.reset();
    		while(robotTimer.get() < 6) {
    			autoDrive.tankDrive(DRIVE_SPEED, DRIVE_SPEED);
    		}
    		while(robotTimer.get() < 1) {
    			autoDrive.tankDrive(TURN_SPEED, -TURN_SPEED);
    		}
    		//TODO: Add colour sensor input to determine switch colour
    		//		Do this by adding colour class		
    		 
    		
    		//Check if alliance colour matches switch colour
    		if(robotColour == switchColour ) {
    			
    		} 
    		
    		//If can't find any colour
    		else if (switchColour == switchInvalid) {
    			
    		}
    		
    		//If colours don't match and not inva
    		else if ((robotColour != switchColour) && (switchColour != switchInvalid)) {
    			
    		} 
    		
    		autoDrive.tankDrive(0, 0);
    		
    	}
    	
    	
    	//For Middle Side
    	if(robotLocation == positionMiddle) {
    		robotTimer.reset();
    		while(robotTimer.get() < 6) {
    			autoDrive.tankDrive(MIDDLE_DRIVE, MIDDLE_DRIVE);
    		}

    		//Check if alliance colour matches switch colour
    		if(robotColour == switchColour ) {
    			
    		} 
    		
    		//If can't find any colour
    		else if (switchColour == switchInvalid) {
    			
    		}
    		
    		//If colours don't match and not invalid
    		else if ((robotColour != switchColour) && (switchColour != switchInvalid)) {
    			
    		} 
    		//Stops motors.
    		autoDrive.tankDrive(0, 0);
    	}
    	
    	
    	//For Right Side
    	if(robotLocation == positionRight) {
    		robotTimer.reset();
    		while(robotTimer.get() < 6) {
    			autoDrive.tankDrive(DRIVE_SPEED, DRIVE_SPEED);
    		}
    		while(robotTimer.get() < 1) {
    			autoDrive.tankDrive(-TURN_SPEED, TURN_SPEED);
    		}

    		//Check if alliance colour matches switch colour
    		if(robotColour == switchColour ) {
    			
    		} 
    		
    		//If can't find any colour
    		else if (switchColour == switchInvalid) {
    			
    		}
    		
    		//If colours don't match and not invalid
    		else if ((robotColour != switchColour) && (switchColour != switchInvalid)) {
    			
    		} 
    		autoDrive.tankDrive(0, 0);
    	}
    	
    	
    }
    	

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	robotLocation = DS.getLocation();
    	robotColour = DS.getAlliance();
    	robotTimer.reset();
    	robotTimer.start();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}

